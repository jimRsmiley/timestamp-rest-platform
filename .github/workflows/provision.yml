name: "Provision Infrastructure"

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:

      - name: Delete AWS CLI v1
        run: sudo rm -rf /usr/local/aws && sudo rm -f /usr/local/bin/aws
        continue-on-error: true

      - name: Install AWS CLI v2
        run: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install

      - name: ensure required commands are installed
        run: |
          uname -a && \
            which -a tr && \
            which -a jq && jq --version

      - name: Output AWS CLI version
        run: aws --version && which -a aws

      - name: Output version of kubectl
        run: kubectl version --client
        
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Output Terraform version
        run: cd ./terraform && terraform version

      - name: Terraform Format
        id: fmt
        run: cd ./terraform && terraform fmt -check

      - name: Terraform Init
        id: init
        run: cd ./terraform && terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd ./terraform && terraform plan -no-color
        continue-on-error: true
        
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: cd ./terraform && terraform apply -auto-approve

      - name: Output cluster region and name
        run: echo "$cluster_region $cluster_name"
        with:
          cluster_region: ${{ secrets.CLUSTER_REGION }}
          cluster_name: ${{ secrets.CLUSTER_NAME }}

      - name: Set kubectl context
        run: aws eks --region $cluster_region update-kubeconfig --name $cluster_name
        with:
          cluster_region: ${{ secrets.CLUSTER_REGION }}
          cluster_name: ${{ secrets.CLUSTER_NAME }}
